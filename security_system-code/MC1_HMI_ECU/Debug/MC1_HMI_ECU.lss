
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00002bca  00002c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800106  00800106  00002d04  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001322  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000988e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 09 	call	0x12c4	; 0x12c4 <main>
      8a:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_MOTOR_ISR>:
 * 15 seconds CW
 * 3 seconds
 * 15 seconds ACW
 */

void TIMER1_MOTOR_ISR(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*ticks to calculate time*/
	ticks++;
     b4e:	80 91 0b 01 	lds	r24, 0x010B
     b52:	90 91 0c 01 	lds	r25, 0x010C
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 0c 01 	sts	0x010C, r25
     b5c:	80 93 0b 01 	sts	0x010B, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <TIMER1_ALARM_ISR>:

/*
 * Description: call back Function by timer to calculate time of alarm
 */

void TIMER1_ALARM_ISR() {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     b6e:	80 91 0b 01 	lds	r24, 0x010B
     b72:	90 91 0c 01 	lds	r25, 0x010C
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 0c 01 	sts	0x010C, r25
     b7c:	80 93 0b 01 	sts	0x010B, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <Send_Password>:

/*
 * Description : Function to send password to Control ECU
 */

void Send_Password(uint8 *password ){
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <Send_Password+0x6>
     b8c:	0f 92       	push	r0
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	while (UART_recieveByte() != MC1_READY) {}
     b96:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
     b9a:	80 31       	cpi	r24, 0x10	; 16
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <Send_Password+0x10>
	for (i = 0; i < PASSWORD_SIZE; i++) {
     b9e:	19 82       	std	Y+1, r1	; 0x01
     ba0:	0e c0       	rjmp	.+28     	; 0xbbe <Send_Password+0x38>
		UART_sendByte(password[i]);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	fc 01       	movw	r30, r24
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	80 81       	ld	r24, Z
     bb4:	0e 94 b3 14 	call	0x2966	; 0x2966 <UART_sendByte>
 */

void Send_Password(uint8 *password ){
	uint8 i;
	while (UART_recieveByte() != MC1_READY) {}
	for (i = 0; i < PASSWORD_SIZE; i++) {
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	78 f3       	brcs	.-34     	; 0xba2 <Send_Password+0x1c>
		UART_sendByte(password[i]);
	}

}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <check_First_Password>:

/*
 * Description: Function to check if first passowrd of system is created.
 */

void check_First_Password(){
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	uint8 flag = 0; /*flag to check if first pass of the system is created */
     bda:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(MC1_READY);
     bdc:	80 e1       	ldi	r24, 0x10	; 16
     bde:	0e 94 b3 14 	call	0x2966	; 0x2966 <UART_sendByte>
	flag = UART_recieveByte();
     be2:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
     be6:	89 83       	std	Y+1, r24	; 0x01
	if (flag == 1) {
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	11 f4       	brne	.+4      	; 0xbf2 <check_First_Password+0x22>
		create_Password();
     bee:	0e 94 49 06 	call	0xc92	; 0xc92 <create_Password>
	}
}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <Open_Door>:


/*
 * Description: Function to display door is open for 33 seconds
 */
void Open_Door(void) {
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
	Timer1_setCallBack(&TIMER1_MOTOR_ISR);
     c02:	83 ea       	ldi	r24, 0xA3	; 163
     c04:	95 e0       	ldi	r25, 0x05	; 5
     c06:	0e 94 2f 14 	call	0x285e	; 0x285e <Timer1_setCallBack>
	Timer1_init(&TIMER1_Config);
     c0a:	8b ef       	ldi	r24, 0xFB	; 251
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 c7 13 	call	0x278e	; 0x278e <Timer1_init>
	while (1) {
		LCD_displayStringRowColumn(0, 0, "Door is open");
     c12:	20 e6       	ldi	r18, 0x60	; 96
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	a9 01       	movw	r20, r18
     c1c:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
		if (ticks > DOOR_OPEN_SECONDS) {
     c20:	80 91 0b 01 	lds	r24, 0x010B
     c24:	90 91 0c 01 	lds	r25, 0x010C
     c28:	82 32       	cpi	r24, 0x22	; 34
     c2a:	91 05       	cpc	r25, r1
     c2c:	90 f3       	brcs	.-28     	; 0xc12 <Open_Door+0x18>
			ticks = 0;
     c2e:	10 92 0c 01 	sts	0x010C, r1
     c32:	10 92 0b 01 	sts	0x010B, r1
			Timer1_deInit();
     c36:	0e 94 13 14 	call	0x2826	; 0x2826 <Timer1_deInit>
			LCD_clearScreen();
     c3a:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			break;
		}
	}
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <alarm>:


/*
 * Description: Function to display warning message for 1 mins
 */
void alarm() {
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	Timer1_setCallBack(&TIMER1_ALARM_ISR);
     c4c:	83 eb       	ldi	r24, 0xB3	; 179
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	0e 94 2f 14 	call	0x285e	; 0x285e <Timer1_setCallBack>
	Timer1_init(&TIMER1_Config);
     c54:	8b ef       	ldi	r24, 0xFB	; 251
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 c7 13 	call	0x278e	; 0x278e <Timer1_init>
	while (1) {
		LCD_displayStringRowColumn(0, 5, "ERROR ");
     c5c:	2d e6       	ldi	r18, 0x6D	; 109
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	65 e0       	ldi	r22, 0x05	; 5
     c64:	a9 01       	movw	r20, r18
     c66:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
		if (ticks == 60) {
     c6a:	80 91 0b 01 	lds	r24, 0x010B
     c6e:	90 91 0c 01 	lds	r25, 0x010C
     c72:	8c 33       	cpi	r24, 0x3C	; 60
     c74:	91 05       	cpc	r25, r1
     c76:	91 f7       	brne	.-28     	; 0xc5c <alarm+0x18>
			ticks = 0;
     c78:	10 92 0c 01 	sts	0x010C, r1
     c7c:	10 92 0b 01 	sts	0x010B, r1
			Timer1_deInit();
     c80:	0e 94 13 14 	call	0x2826	; 0x2826 <Timer1_deInit>
			LCD_clearScreen();
     c84:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			break;
		}
	}
	LCD_clearScreen();
     c88:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			ticks = 0;
			Timer1_deInit();
			LCD_clearScreen();
			break;
		}
	}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <create_Password>:
/*
 * Description: Function to enter new password for system
 * enter new password
 */

void create_Password() {
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c5 54       	subi	r28, 0x45	; 69
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_SIZE] ;
	uint8 Password_confirmation[PASSWORD_SIZE] ;
	uint8 key = 0;
     ca8:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 i=0;
     caa:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 error=FALSE;
     cac:	19 ae       	std	Y+57, r1	; 0x39
	while (1) {
		LCD_clearScreen();
     cae:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
     cb2:	84 e7       	ldi	r24, 0x74	; 116
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_displayString>
		LCD_moveCursor(1, 0);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_moveCursor>
		/*first loop to enter first password */
		while (1) {
			key = KEYPAD_getPressedKey();
     cc2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
     cc6:	8b af       	std	Y+59, r24	; 0x3b
			if (key >= 0 && key <= 9 ) {
     cc8:	8b ad       	ldd	r24, Y+59	; 0x3b
     cca:	8a 30       	cpi	r24, 0x0A	; 10
     ccc:	d0 f7       	brcc	.-12     	; 0xcc2 <create_Password+0x30>
				password[i] = key;
     cce:	8a ad       	ldd	r24, Y+58	; 0x3a
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	ce 01       	movw	r24, r28
     cd6:	cc 96       	adiw	r24, 0x3c	; 60
     cd8:	fc 01       	movw	r30, r24
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	8b ad       	ldd	r24, Y+59	; 0x3b
     ce0:	80 83       	st	Z, r24
				i++;
     ce2:	8a ad       	ldd	r24, Y+58	; 0x3a
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	8a af       	std	Y+58, r24	; 0x3a
				LCD_displayCharacter('*');
     ce8:	8a e2       	ldi	r24, 0x2A	; 42
     cea:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayCharacter>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	aa ef       	ldi	r26, 0xFA	; 250
     cf4:	b3 e4       	ldi	r27, 0x43	; 67
     cf6:	8d ab       	std	Y+53, r24	; 0x35
     cf8:	9e ab       	std	Y+54, r25	; 0x36
     cfa:	af ab       	std	Y+55, r26	; 0x37
     cfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	6d a9       	ldd	r22, Y+53	; 0x35
     d00:	7e a9       	ldd	r23, Y+54	; 0x36
     d02:	8f a9       	ldd	r24, Y+55	; 0x37
     d04:	98 ad       	ldd	r25, Y+56	; 0x38
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ef       	ldi	r20, 0xFA	; 250
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	89 ab       	std	Y+49, r24	; 0x31
     d18:	9a ab       	std	Y+50, r25	; 0x32
     d1a:	ab ab       	std	Y+51, r26	; 0x33
     d1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d1e:	69 a9       	ldd	r22, Y+49	; 0x31
     d20:	7a a9       	ldd	r23, Y+50	; 0x32
     d22:	8b a9       	ldd	r24, Y+51	; 0x33
     d24:	9c a9       	ldd	r25, Y+52	; 0x34
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	2c f4       	brge	.+10     	; 0xd40 <create_Password+0xae>
		__ticks = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 ab       	std	Y+48, r25	; 0x30
     d3c:	8f a7       	std	Y+47, r24	; 0x2f
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <create_Password+0x12c>
	else if (__tmp > 65535)
     d40:	69 a9       	ldd	r22, Y+49	; 0x31
     d42:	7a a9       	ldd	r23, Y+50	; 0x32
     d44:	8b a9       	ldd	r24, Y+51	; 0x33
     d46:	9c a9       	ldd	r25, Y+52	; 0x34
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	4c f5       	brge	.+82     	; 0xdaa <create_Password+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	6d a9       	ldd	r22, Y+53	; 0x35
     d5a:	7e a9       	ldd	r23, Y+54	; 0x36
     d5c:	8f a9       	ldd	r24, Y+55	; 0x37
     d5e:	98 ad       	ldd	r25, Y+56	; 0x38
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	98 ab       	std	Y+48, r25	; 0x30
     d7e:	8f a7       	std	Y+47, r24	; 0x2f
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <create_Password+0x10e>
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9e a7       	std	Y+46, r25	; 0x2e
     d88:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d8c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <create_Password+0xfc>
     d92:	9e a7       	std	Y+46, r25	; 0x2e
     d94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	8f a5       	ldd	r24, Y+47	; 0x2f
     d98:	98 a9       	ldd	r25, Y+48	; 0x30
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	98 ab       	std	Y+48, r25	; 0x30
     d9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	8f a5       	ldd	r24, Y+47	; 0x2f
     da2:	98 a9       	ldd	r25, Y+48	; 0x30
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	69 f7       	brne	.-38     	; 0xd82 <create_Password+0xf0>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <create_Password+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	69 a9       	ldd	r22, Y+49	; 0x31
     dac:	7a a9       	ldd	r23, Y+50	; 0x32
     dae:	8b a9       	ldd	r24, Y+51	; 0x33
     db0:	9c a9       	ldd	r25, Y+52	; 0x34
     db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	98 ab       	std	Y+48, r25	; 0x30
     dbc:	8f a7       	std	Y+47, r24	; 0x2f
     dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc0:	98 a9       	ldd	r25, Y+48	; 0x30
     dc2:	9c a7       	std	Y+44, r25	; 0x2c
     dc4:	8b a7       	std	Y+43, r24	; 0x2b
     dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <create_Password+0x138>
     dce:	9c a7       	std	Y+44, r25	; 0x2c
     dd0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				if(i==5){
     dd2:	8a ad       	ldd	r24, Y+58	; 0x3a
     dd4:	85 30       	cpi	r24, 0x05	; 5
     dd6:	09 f0       	breq	.+2      	; 0xdda <create_Password+0x148>
     dd8:	74 cf       	rjmp	.-280    	; 0xcc2 <create_Password+0x30>
					i=0;
     dda:	1a ae       	std	Y+58, r1	; 0x3a
					break;
				}
			}
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait tell the user press Enter key on the keypad */
     ddc:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
     de0:	8d 30       	cpi	r24, 0x0D	; 13
     de2:	e1 f7       	brne	.-8      	; 0xddc <create_Password+0x14a>
		LCD_clearScreen();
     de4:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
     de8:	24 e8       	ldi	r18, 0x84	; 132
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
     df6:	25 e9       	ldi	r18, 0x95	; 149
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	a9 01       	movw	r20, r18
     e00:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
		/*second loop to enter second password */
		while (1) {
			key = KEYPAD_getPressedKey();
     e04:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
     e08:	8b af       	std	Y+59, r24	; 0x3b
			if (key >= 0 && key <= 9 ) {
     e0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e0c:	8a 30       	cpi	r24, 0x0A	; 10
     e0e:	d0 f7       	brcc	.-12     	; 0xe04 <create_Password+0x172>
				Password_confirmation[i] = key;
     e10:	8a ad       	ldd	r24, Y+58	; 0x3a
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	ce 01       	movw	r24, r28
     e18:	8f 5b       	subi	r24, 0xBF	; 191
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	8b ad       	ldd	r24, Y+59	; 0x3b
     e24:	80 83       	st	Z, r24
				i++;
     e26:	8a ad       	ldd	r24, Y+58	; 0x3a
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	8a af       	std	Y+58, r24	; 0x3a
				LCD_displayCharacter('*');
     e2c:	8a e2       	ldi	r24, 0x2A	; 42
     e2e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayCharacter>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	aa ef       	ldi	r26, 0xFA	; 250
     e38:	b3 e4       	ldi	r27, 0x43	; 67
     e3a:	8f a3       	std	Y+39, r24	; 0x27
     e3c:	98 a7       	std	Y+40, r25	; 0x28
     e3e:	a9 a7       	std	Y+41, r26	; 0x29
     e40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6f a1       	ldd	r22, Y+39	; 0x27
     e44:	78 a5       	ldd	r23, Y+40	; 0x28
     e46:	89 a5       	ldd	r24, Y+41	; 0x29
     e48:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a ef       	ldi	r20, 0xFA	; 250
     e50:	54 e4       	ldi	r21, 0x44	; 68
     e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	8b a3       	std	Y+35, r24	; 0x23
     e5c:	9c a3       	std	Y+36, r25	; 0x24
     e5e:	ad a3       	std	Y+37, r26	; 0x25
     e60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e62:	6b a1       	ldd	r22, Y+35	; 0x23
     e64:	7c a1       	ldd	r23, Y+36	; 0x24
     e66:	8d a1       	ldd	r24, Y+37	; 0x25
     e68:	9e a1       	ldd	r25, Y+38	; 0x26
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <create_Password+0x1f2>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9a a3       	std	Y+34, r25	; 0x22
     e80:	89 a3       	std	Y+33, r24	; 0x21
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <create_Password+0x270>
	else if (__tmp > 65535)
     e84:	6b a1       	ldd	r22, Y+35	; 0x23
     e86:	7c a1       	ldd	r23, Y+36	; 0x24
     e88:	8d a1       	ldd	r24, Y+37	; 0x25
     e8a:	9e a1       	ldd	r25, Y+38	; 0x26
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <create_Password+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6f a1       	ldd	r22, Y+39	; 0x27
     e9e:	78 a5       	ldd	r23, Y+40	; 0x28
     ea0:	89 a5       	ldd	r24, Y+41	; 0x29
     ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9a a3       	std	Y+34, r25	; 0x22
     ec2:	89 a3       	std	Y+33, r24	; 0x21
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <create_Password+0x252>
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	98 a3       	std	Y+32, r25	; 0x20
     ecc:	8f 8f       	std	Y+31, r24	; 0x1f
     ece:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed0:	98 a1       	ldd	r25, Y+32	; 0x20
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <create_Password+0x240>
     ed6:	98 a3       	std	Y+32, r25	; 0x20
     ed8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	89 a1       	ldd	r24, Y+33	; 0x21
     edc:	9a a1       	ldd	r25, Y+34	; 0x22
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9a a3       	std	Y+34, r25	; 0x22
     ee2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	89 a1       	ldd	r24, Y+33	; 0x21
     ee6:	9a a1       	ldd	r25, Y+34	; 0x22
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <create_Password+0x234>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <create_Password+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9a a3       	std	Y+34, r25	; 0x22
     f00:	89 a3       	std	Y+33, r24	; 0x21
     f02:	89 a1       	ldd	r24, Y+33	; 0x21
     f04:	9a a1       	ldd	r25, Y+34	; 0x22
     f06:	9e 8f       	std	Y+30, r25	; 0x1e
     f08:	8d 8f       	std	Y+29, r24	; 0x1d
     f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <create_Password+0x27c>
     f12:	9e 8f       	std	Y+30, r25	; 0x1e
     f14:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				if(i==5){
     f16:	8a ad       	ldd	r24, Y+58	; 0x3a
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	09 f0       	breq	.+2      	; 0xf1e <create_Password+0x28c>
     f1c:	73 cf       	rjmp	.-282    	; 0xe04 <create_Password+0x172>
					i=0;
     f1e:	1a ae       	std	Y+58, r1	; 0x3a
					break;
				}
			}
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY){} /* wait tell the user press Enter key on the keypad */
     f20:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
     f24:	8d 30       	cpi	r24, 0x0D	; 13
     f26:	e1 f7       	brne	.-8      	; 0xf20 <create_Password+0x28e>
		Send_Password(password);
     f28:	ce 01       	movw	r24, r28
     f2a:	cc 96       	adiw	r24, 0x3c	; 60
     f2c:	0e 94 c3 05 	call	0xb86	; 0xb86 <Send_Password>
		Send_Password(Password_confirmation);
     f30:	ce 01       	movw	r24, r28
     f32:	8f 5b       	subi	r24, 0xBF	; 191
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	0e 94 c3 05 	call	0xb86	; 0xb86 <Send_Password>
		//UART_sendByte(READY);
		LCD_clearScreen();
     f3a:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
		error=UART_recieveByte();
     f3e:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
     f42:	89 af       	std	Y+57, r24	; 0x39
		if(error==FALSE){
     f44:	89 ad       	ldd	r24, Y+57	; 0x39
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <create_Password+0x2ba>
     f4a:	81 c0       	rjmp	.+258    	; 0x104e <create_Password+0x3bc>
			LCD_displayStringRowColumn(0, 0, "Correct");
     f4c:	21 ea       	ldi	r18, 0xA1	; 161
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Password created");
     f5a:	29 ea       	ldi	r18, 0xA9	; 169
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	aa ef       	ldi	r26, 0xFA	; 250
     f6e:	b3 e4       	ldi	r27, 0x43	; 67
     f70:	89 8f       	std	Y+25, r24	; 0x19
     f72:	9a 8f       	std	Y+26, r25	; 0x1a
     f74:	ab 8f       	std	Y+27, r26	; 0x1b
     f76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	69 8d       	ldd	r22, Y+25	; 0x19
     f7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8d 8b       	std	Y+21, r24	; 0x15
     f92:	9e 8b       	std	Y+22, r25	; 0x16
     f94:	af 8b       	std	Y+23, r26	; 0x17
     f96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f98:	6d 89       	ldd	r22, Y+21	; 0x15
     f9a:	7e 89       	ldd	r23, Y+22	; 0x16
     f9c:	8f 89       	ldd	r24, Y+23	; 0x17
     f9e:	98 8d       	ldd	r25, Y+24	; 0x18
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <create_Password+0x328>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 8b       	std	Y+20, r25	; 0x14
     fb6:	8b 8b       	std	Y+19, r24	; 0x13
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <create_Password+0x3a6>
	else if (__tmp > 65535)
     fba:	6d 89       	ldd	r22, Y+21	; 0x15
     fbc:	7e 89       	ldd	r23, Y+22	; 0x16
     fbe:	8f 89       	ldd	r24, Y+23	; 0x17
     fc0:	98 8d       	ldd	r25, Y+24	; 0x18
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <create_Password+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	69 8d       	ldd	r22, Y+25	; 0x19
     fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9c 8b       	std	Y+20, r25	; 0x14
     ff8:	8b 8b       	std	Y+19, r24	; 0x13
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <create_Password+0x388>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 8b       	std	Y+18, r25	; 0x12
    1002:	89 8b       	std	Y+17, r24	; 0x11
    1004:	89 89       	ldd	r24, Y+17	; 0x11
    1006:	9a 89       	ldd	r25, Y+18	; 0x12
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <create_Password+0x376>
    100c:	9a 8b       	std	Y+18, r25	; 0x12
    100e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8b 89       	ldd	r24, Y+19	; 0x13
    101c:	9c 89       	ldd	r25, Y+20	; 0x14
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <create_Password+0x36a>
    1022:	8f c0       	rjmp	.+286    	; 0x1142 <create_Password+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	6d 89       	ldd	r22, Y+21	; 0x15
    1026:	7e 89       	ldd	r23, Y+22	; 0x16
    1028:	8f 89       	ldd	r24, Y+23	; 0x17
    102a:	98 8d       	ldd	r25, Y+24	; 0x18
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	8b 89       	ldd	r24, Y+19	; 0x13
    103a:	9c 89       	ldd	r25, Y+20	; 0x14
    103c:	98 8b       	std	Y+16, r25	; 0x10
    103e:	8f 87       	std	Y+15, r24	; 0x0f
    1040:	8f 85       	ldd	r24, Y+15	; 0x0f
    1042:	98 89       	ldd	r25, Y+16	; 0x10
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <create_Password+0x3b2>
    1048:	98 8b       	std	Y+16, r25	; 0x10
    104a:	8f 87       	std	Y+15, r24	; 0x0f
    104c:	7a c0       	rjmp	.+244    	; 0x1142 <create_Password+0x4b0>
			_delay_ms(500);
			break;
		}else{
			LCD_displayStringRowColumn(0, 0, "Wrong pass");
    104e:	2a eb       	ldi	r18, 0xBA	; 186
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	a9 01       	movw	r20, r18
    1058:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	aa ef       	ldi	r26, 0xFA	; 250
    1062:	b3 e4       	ldi	r27, 0x43	; 67
    1064:	8b 87       	std	Y+11, r24	; 0x0b
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	ad 87       	std	Y+13, r26	; 0x0d
    106a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6b 85       	ldd	r22, Y+11	; 0x0b
    106e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a ef       	ldi	r20, 0xFA	; 250
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8f 83       	std	Y+7, r24	; 0x07
    1086:	98 87       	std	Y+8, r25	; 0x08
    1088:	a9 87       	std	Y+9, r26	; 0x09
    108a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <create_Password+0x41c>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <create_Password+0x49a>
	else if (__tmp > 65535)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <create_Password+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <create_Password+0x47c>
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <create_Password+0x46a>
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <create_Password+0x45e>
    1116:	cb cd       	rjmp	.-1130   	; 0xcae <create_Password+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <create_Password+0x4a6>
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	b6 cd       	rjmp	.-1172   	; 0xcae <create_Password+0x1c>
			_delay_ms(500);
			continue;
		}
	}
}
    1142:	cb 5b       	subi	r28, 0xBB	; 187
    1144:	df 4f       	sbci	r29, 0xFF	; 255
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <user_Password>:
/*
 * Description: Function to enter password to open door or change password
 * enter password
 * send to control ECU to match it with system password
 */
void user_Password() {
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	65 97       	sbiw	r28, 0x15	; 21
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0;
    116a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 i = 0;
    116c:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 enter_password[PASSWORD_SIZE] = { 0 };
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	fe 01       	movw	r30, r28
    1172:	71 96       	adiw	r30, 0x11	; 17
    1174:	df 01       	movw	r26, r30
    1176:	98 2f       	mov	r25, r24
    1178:	1d 92       	st	X+, r1
    117a:	9a 95       	dec	r25
    117c:	e9 f7       	brne	.-6      	; 0x1178 <user_Password+0x22>
	LCD_clearScreen();
    117e:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1182:	85 ec       	ldi	r24, 0xC5	; 197
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_displayString>
	LCD_moveCursor(1, 0);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_moveCursor>
	/*loop to enter password */
	while (1) {
		key = KEYPAD_getPressedKey(); /*take value from keypad , if it is number save in password*/
    1192:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
    1196:	88 8b       	std	Y+16, r24	; 0x10
		enter_password[i] = key;
    1198:	8f 85       	ldd	r24, Y+15	; 0x0f
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	ce 01       	movw	r24, r28
    11a0:	41 96       	adiw	r24, 0x11	; 17
    11a2:	fc 01       	movw	r30, r24
    11a4:	e2 0f       	add	r30, r18
    11a6:	f3 1f       	adc	r31, r19
    11a8:	88 89       	ldd	r24, Y+16	; 0x10
    11aa:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    11ac:	8a e2       	ldi	r24, 0x2A	; 42
    11ae:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayCharacter>
		i++;
    11b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	8f 87       	std	Y+15, r24	; 0x0f
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	aa ef       	ldi	r26, 0xFA	; 250
    11be:	b3 e4       	ldi	r27, 0x43	; 67
    11c0:	8b 87       	std	Y+11, r24	; 0x0b
    11c2:	9c 87       	std	Y+12, r25	; 0x0c
    11c4:	ad 87       	std	Y+13, r26	; 0x0d
    11c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    11cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a ef       	ldi	r20, 0xFA	; 250
    11d6:	54 e4       	ldi	r21, 0x44	; 68
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8f 83       	std	Y+7, r24	; 0x07
    11e2:	98 87       	std	Y+8, r25	; 0x08
    11e4:	a9 87       	std	Y+9, r26	; 0x09
    11e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <user_Password+0xb4>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <user_Password+0x132>
	else if (__tmp > 65535)
    120a:	6f 81       	ldd	r22, Y+7	; 0x07
    120c:	78 85       	ldd	r23, Y+8	; 0x08
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <user_Password+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6b 85       	ldd	r22, Y+11	; 0x0b
    1224:	7c 85       	ldd	r23, Y+12	; 0x0c
    1226:	8d 85       	ldd	r24, Y+13	; 0x0d
    1228:	9e 85       	ldd	r25, Y+14	; 0x0e
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	0f c0       	rjmp	.+30     	; 0x126a <user_Password+0x114>
    124c:	88 ec       	ldi	r24, 0xC8	; 200
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <user_Password+0x102>
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <user_Password+0xf6>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <user_Password+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <user_Password+0x13e>
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*break loop when enter five numbers of password*/
		if(i==5){
    129c:	8f 85       	ldd	r24, Y+15	; 0x0f
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <user_Password+0x14e>
    12a2:	77 cf       	rjmp	.-274    	; 0x1192 <user_Password+0x3c>
			LCD_clearScreen();
    12a4:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			i=0;
    12a8:	1f 86       	std	Y+15, r1	; 0x0f
			break;
		}
	}
	Send_Password(enter_password);
    12aa:	ce 01       	movw	r24, r28
    12ac:	41 96       	adiw	r24, 0x11	; 17
    12ae:	0e 94 c3 05 	call	0xb86	; 0xb86 <Send_Password>
		if(i==5){
			LCD_clearScreen();
			i=0;
			break;
		}
	}
    12b2:	65 96       	adiw	r28, 0x15	; 21
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <main>:

/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main(void) {
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	64 97       	sbiw	r28, 0x14	; 20
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7); /*Enable global interrupt*/
    12d8:	af e5       	ldi	r26, 0x5F	; 95
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ef e5       	ldi	r30, 0x5F	; 95
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	8c 93       	st	X, r24
	uint8 key = 0;
    12e6:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 check_match = SUCCESS;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 8b       	std	Y+17, r24	; 0x11
	uint8 allowed_tries = 0;
    12ec:	18 8a       	std	Y+16, r1	; 0x10
	states state = CREATE_PASS;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	8f 87       	std	Y+15, r24	; 0x0f
	/* Initialize the LCD Driver */
	LCD_init();
    12f2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <LCD_init>
	/*read from eeprom the size of password to know if it first time use or not*/
	UART_init(&UART_Config);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 41 14 	call	0x2882	; 0x2882 <UART_init>
	check_First_Password();
    12fe:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <check_First_Password>
	while (1) {
		switch (state){
    1302:	8f 85       	ldd	r24, Y+15	; 0x0f
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3c 8b       	std	Y+20, r19	; 0x14
    130a:	2b 8b       	std	Y+19, r18	; 0x13
    130c:	8b 89       	ldd	r24, Y+19	; 0x13
    130e:	9c 89       	ldd	r25, Y+20	; 0x14
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <main+0x54>
    1316:	d3 c0       	rjmp	.+422    	; 0x14be <main+0x1fa>
    1318:	2b 89       	ldd	r18, Y+19	; 0x13
    131a:	3c 89       	ldd	r19, Y+20	; 0x14
    131c:	23 30       	cpi	r18, 0x03	; 3
    131e:	31 05       	cpc	r19, r1
    1320:	5c f4       	brge	.+22     	; 0x1338 <main+0x74>
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	a1 f0       	breq	.+40     	; 0x1352 <main+0x8e>
    132a:	2b 89       	ldd	r18, Y+19	; 0x13
    132c:	3c 89       	ldd	r19, Y+20	; 0x14
    132e:	21 30       	cpi	r18, 0x01	; 1
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <main+0x72>
    1334:	9e c0       	rjmp	.+316    	; 0x1472 <main+0x1ae>
    1336:	e5 cf       	rjmp	.-54     	; 0x1302 <main+0x3e>
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	91 05       	cpc	r25, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <main+0x80>
    1342:	c1 c0       	rjmp	.+386    	; 0x14c6 <main+0x202>
    1344:	2b 89       	ldd	r18, Y+19	; 0x13
    1346:	3c 89       	ldd	r19, Y+20	; 0x14
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	31 05       	cpc	r19, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <main+0x8c>
    134e:	c1 c0       	rjmp	.+386    	; 0x14d2 <main+0x20e>
    1350:	d8 cf       	rjmp	.-80     	; 0x1302 <main+0x3e>
		case MAIN_LIST:
			LCD_displayStringRowColumn(0, 0, "+: Open door");
    1352:	25 ed       	ldi	r18, 0xD5	; 213
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "-: Change Pass  ");
    1360:	22 ee       	ldi	r18, 0xE2	; 226
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_displayStringRowColumn>
			key = KEYPAD_getPressedKey();
    136e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <KEYPAD_getPressedKey>
    1372:	8a 8b       	std	Y+18, r24	; 0x12
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	aa ef       	ldi	r26, 0xFA	; 250
    137a:	b3 e4       	ldi	r27, 0x43	; 67
    137c:	8b 87       	std	Y+11, r24	; 0x0b
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	ad 87       	std	Y+13, r26	; 0x0d
    1382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	7c 85       	ldd	r23, Y+12	; 0x0c
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a ef       	ldi	r20, 0xFA	; 250
    1392:	54 e4       	ldi	r21, 0x44	; 68
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	a9 87       	std	Y+9, r26	; 0x09
    13a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <main+0x102>
		__ticks = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	3f c0       	rjmp	.+126    	; 0x1444 <main+0x180>
	else if (__tmp > 65535)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	4c f5       	brge	.+82     	; 0x1430 <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <main+0x162>
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <main+0x150>
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	69 f7       	brne	.-38     	; 0x1408 <main+0x144>
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <main+0x18c>
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			UART_sendByte(key);
    1458:	8a 89       	ldd	r24, Y+18	; 0x12
    145a:	0e 94 b3 14 	call	0x2966	; 0x2966 <UART_sendByte>
			if (key == '-' || (key == '+')) {
    145e:	8a 89       	ldd	r24, Y+18	; 0x12
    1460:	8d 32       	cpi	r24, 0x2D	; 45
    1462:	21 f0       	breq	.+8      	; 0x146c <main+0x1a8>
    1464:	8a 89       	ldd	r24, Y+18	; 0x12
    1466:	8b 32       	cpi	r24, 0x2B	; 43
    1468:	09 f0       	breq	.+2      	; 0x146c <main+0x1a8>
    146a:	4b cf       	rjmp	.-362    	; 0x1302 <main+0x3e>
				state =ENTER_PASS;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8f 87       	std	Y+15, r24	; 0x0f
    1470:	48 cf       	rjmp	.-368    	; 0x1302 <main+0x3e>
			}
			break;
		case ENTER_PASS:
			do {
				/*in two case user must enter the password*/
				user_Password();
    1472:	0e 94 ab 08 	call	0x1156	; 0x1156 <user_Password>
				check_match = UART_recieveByte();
    1476:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
    147a:	89 8b       	std	Y+17, r24	; 0x11
				allowed_tries++;
    147c:	88 89       	ldd	r24, Y+16	; 0x10
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	88 8b       	std	Y+16, r24	; 0x10
				/*if enter password three times wrong system will display warning message for 1 minute*/
				if (allowed_tries == 3) {
    1482:	88 89       	ldd	r24, Y+16	; 0x10
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	11 f4       	brne	.+4      	; 0x148c <main+0x1c8>
					state=FAIL;
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	8f 87       	std	Y+15, r24	; 0x0f
				}
			} while (check_match == ERROR && allowed_tries != 3);
    148c:	89 89       	ldd	r24, Y+17	; 0x11
    148e:	88 23       	and	r24, r24
    1490:	19 f4       	brne	.+6      	; 0x1498 <main+0x1d4>
    1492:	88 89       	ldd	r24, Y+16	; 0x10
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	69 f7       	brne	.-38     	; 0x1472 <main+0x1ae>
			allowed_tries = 0;
    1498:	18 8a       	std	Y+16, r1	; 0x10
			if(check_match == SUCCESS){
    149a:	89 89       	ldd	r24, Y+17	; 0x11
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <main+0x1de>
    14a0:	30 cf       	rjmp	.-416    	; 0x1302 <main+0x3e>
				if (key == '-') {
    14a2:	8a 89       	ldd	r24, Y+18	; 0x12
    14a4:	8d 32       	cpi	r24, 0x2D	; 45
    14a6:	19 f4       	brne	.+6      	; 0x14ae <main+0x1ea>
					state=CREATE_PASS;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	8f 87       	std	Y+15, r24	; 0x0f
    14ac:	2a cf       	rjmp	.-428    	; 0x1302 <main+0x3e>
				}else if(key== '+'){
    14ae:	8a 89       	ldd	r24, Y+18	; 0x12
    14b0:	8b 32       	cpi	r24, 0x2B	; 43
    14b2:	19 f4       	brne	.+6      	; 0x14ba <main+0x1f6>
					state=OPEN_DOOR;
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	8f 87       	std	Y+15, r24	; 0x0f
    14b8:	24 cf       	rjmp	.-440    	; 0x1302 <main+0x3e>
				}else{
					state=MAIN_LIST;
    14ba:	1f 86       	std	Y+15, r1	; 0x0f
    14bc:	22 cf       	rjmp	.-444    	; 0x1302 <main+0x3e>
				}
			}
			break;
		case CREATE_PASS:
			create_Password();
    14be:	0e 94 49 06 	call	0xc92	; 0xc92 <create_Password>
			state=MAIN_LIST;
    14c2:	1f 86       	std	Y+15, r1	; 0x0f
    14c4:	1e cf       	rjmp	.-452    	; 0x1302 <main+0x3e>
			break;
		case OPEN_DOOR:
			LCD_clearScreen();
    14c6:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			Open_Door();
    14ca:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Open_Door>
			state=MAIN_LIST;
    14ce:	1f 86       	std	Y+15, r1	; 0x0f
    14d0:	18 cf       	rjmp	.-464    	; 0x1302 <main+0x3e>
			break;
		case FAIL:
			LCD_clearScreen();
    14d2:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_clearScreen>
			alarm();
    14d6:	0e 94 22 06 	call	0xc44	; 0xc44 <alarm>
			state=MAIN_LIST;
    14da:	1f 86       	std	Y+15, r1	; 0x0f
    14dc:	12 cf       	rjmp	.-476    	; 0x1302 <main+0x3e>

000014de <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <GPIO_setupPinDirection+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <GPIO_setupPinDirection+0x8>
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	6a 83       	std	Y+2, r22	; 0x02
    14f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <GPIO_setupPinDirection+0x1c>
    14f8:	d5 c0       	rjmp	.+426    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <GPIO_setupPinDirection+0x24>
    1500:	d1 c0       	rjmp	.+418    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <GPIO_setupPinDirection+0x3a>
    1516:	43 c0       	rjmp	.+134    	; 0x159e <GPIO_setupPinDirection+0xc0>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <GPIO_setupPinDirection+0x4e>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	71 f0       	breq	.+28     	; 0x1546 <GPIO_setupPinDirection+0x68>
    152a:	bc c0       	rjmp	.+376    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	3d 81       	ldd	r19, Y+5	; 0x05
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <GPIO_setupPinDirection+0x5a>
    1536:	5f c0       	rjmp	.+190    	; 0x15f6 <GPIO_setupPinDirection+0x118>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_setupPinDirection+0x66>
    1542:	85 c0       	rjmp	.+266    	; 0x164e <GPIO_setupPinDirection+0x170>
    1544:	af c0       	rjmp	.+350    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	a1 f4       	brne	.+40     	; 0x1574 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    154c:	aa e3       	ldi	r26, 0x3A	; 58
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_setupPinDirection+0x8c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_setupPinDirection+0x88>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	98 c0       	rjmp	.+304    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1574:	aa e3       	ldi	r26, 0x3A	; 58
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ea e3       	ldi	r30, 0x3A	; 58
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_setupPinDirection+0xb4>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_setupPinDirection+0xb0>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	83 c0       	rjmp	.+262    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	a1 f4       	brne	.+40     	; 0x15cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15a4:	a7 e3       	ldi	r26, 0x37	; 55
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_setupPinDirection+0xe4>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_setupPinDirection+0xe0>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	6c c0       	rjmp	.+216    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15cc:	a7 e3       	ldi	r26, 0x37	; 55
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e7 e3       	ldi	r30, 0x37	; 55
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_setupPinDirection+0x10c>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_setupPinDirection+0x108>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	57 c0       	rjmp	.+174    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	a1 f4       	brne	.+40     	; 0x1624 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15fc:	a4 e3       	ldi	r26, 0x34	; 52
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e4 e3       	ldi	r30, 0x34	; 52
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_setupPinDirection+0x13c>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_setupPinDirection+0x138>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	40 c0       	rjmp	.+128    	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e4 e3       	ldi	r30, 0x34	; 52
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_setupPinDirection+0x164>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_setupPinDirection+0x160>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	2b c0       	rjmp	.+86     	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	a1 f4       	brne	.+40     	; 0x167c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1654:	a1 e3       	ldi	r26, 0x31	; 49
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e1 e3       	ldi	r30, 0x31	; 49
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_setupPinDirection+0x194>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_setupPinDirection+0x190>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    167c:	a1 e3       	ldi	r26, 0x31	; 49
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e1 e3       	ldi	r30, 0x31	; 49
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_setupPinDirection+0x1bc>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_setupPinDirection+0x1b8>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <GPIO_writePin+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <GPIO_writePin+0x8>
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	6a 83       	std	Y+2, r22	; 0x02
    16c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <GPIO_writePin+0x1c>
    16ce:	d5 c0       	rjmp	.+426    	; 0x187a <GPIO_writePin+0x1c6>
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <GPIO_writePin+0x24>
    16d6:	d1 c0       	rjmp	.+418    	; 0x187a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <GPIO_writePin+0x3a>
    16ec:	43 c0       	rjmp	.+134    	; 0x1774 <GPIO_writePin+0xc0>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <GPIO_writePin+0x4e>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	71 f0       	breq	.+28     	; 0x171c <GPIO_writePin+0x68>
    1700:	bc c0       	rjmp	.+376    	; 0x187a <GPIO_writePin+0x1c6>
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	3d 81       	ldd	r19, Y+5	; 0x05
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <GPIO_writePin+0x5a>
    170c:	5f c0       	rjmp	.+190    	; 0x17cc <GPIO_writePin+0x118>
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <GPIO_writePin+0x66>
    1718:	85 c0       	rjmp	.+266    	; 0x1824 <GPIO_writePin+0x170>
    171a:	af c0       	rjmp	.+350    	; 0x187a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	a1 f4       	brne	.+40     	; 0x174a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1722:	ab e3       	ldi	r26, 0x3B	; 59
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	eb e3       	ldi	r30, 0x3B	; 59
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_writePin+0x8c>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_writePin+0x88>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	98 c0       	rjmp	.+304    	; 0x187a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    174a:	ab e3       	ldi	r26, 0x3B	; 59
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb e3       	ldi	r30, 0x3B	; 59
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_writePin+0xb4>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_writePin+0xb0>
    176c:	80 95       	com	r24
    176e:	84 23       	and	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	83 c0       	rjmp	.+262    	; 0x187a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	a1 f4       	brne	.+40     	; 0x17a2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    177a:	a8 e3       	ldi	r26, 0x38	; 56
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_writePin+0xe4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_writePin+0xe0>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	6c c0       	rjmp	.+216    	; 0x187a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17a2:	a8 e3       	ldi	r26, 0x38	; 56
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_writePin+0x10c>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_writePin+0x108>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	57 c0       	rjmp	.+174    	; 0x187a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a1 f4       	brne	.+40     	; 0x17fa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17d2:	a5 e3       	ldi	r26, 0x35	; 53
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e3       	ldi	r30, 0x35	; 53
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_writePin+0x13c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_writePin+0x138>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	40 c0       	rjmp	.+128    	; 0x187a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17fa:	a5 e3       	ldi	r26, 0x35	; 53
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e3       	ldi	r30, 0x35	; 53
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_writePin+0x164>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_writePin+0x160>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	2b c0       	rjmp	.+86     	; 0x187a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    182a:	a2 e3       	ldi	r26, 0x32	; 50
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e2 e3       	ldi	r30, 0x32	; 50
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_writePin+0x194>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_writePin+0x190>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	14 c0       	rjmp	.+40     	; 0x187a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1852:	a2 e3       	ldi	r26, 0x32	; 50
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e2 e3       	ldi	r30, 0x32	; 50
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_writePin+0x1bc>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_writePin+0x1b8>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <GPIO_readPin+0x6>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <GPIO_readPin+0x8>
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    189c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <GPIO_readPin+0x1c>
    18a4:	84 c0       	rjmp	.+264    	; 0x19ae <GPIO_readPin+0x124>
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <GPIO_readPin+0x24>
    18ac:	80 c0       	rjmp	.+256    	; 0x19ae <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3d 83       	std	Y+5, r19	; 0x05
    18b6:	2c 83       	std	Y+4, r18	; 0x04
    18b8:	4c 81       	ldd	r20, Y+4	; 0x04
    18ba:	5d 81       	ldd	r21, Y+5	; 0x05
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	79 f1       	breq	.+94     	; 0x1920 <GPIO_readPin+0x96>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <GPIO_readPin+0x4e>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	69 f0       	breq	.+26     	; 0x18f0 <GPIO_readPin+0x66>
    18d6:	6b c0       	rjmp	.+214    	; 0x19ae <GPIO_readPin+0x124>
    18d8:	4c 81       	ldd	r20, Y+4	; 0x04
    18da:	5d 81       	ldd	r21, Y+5	; 0x05
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	b9 f1       	breq	.+110    	; 0x1950 <GPIO_readPin+0xc6>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <GPIO_readPin+0x64>
    18ec:	49 c0       	rjmp	.+146    	; 0x1980 <GPIO_readPin+0xf6>
    18ee:	5f c0       	rjmp	.+190    	; 0x19ae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18f0:	e9 e3       	ldi	r30, 0x39	; 57
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_readPin+0x7e>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_readPin+0x7a>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	88 23       	and	r24, r24
    1914:	19 f0       	breq	.+6      	; 0x191c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	49 c0       	rjmp	.+146    	; 0x19ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	47 c0       	rjmp	.+142    	; 0x19ae <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1920:	e6 e3       	ldi	r30, 0x36	; 54
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_readPin+0xae>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_readPin+0xaa>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 23       	and	r24, r24
    1944:	19 f0       	breq	.+6      	; 0x194c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	31 c0       	rjmp	.+98     	; 0x19ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	2f c0       	rjmp	.+94     	; 0x19ae <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1950:	e3 e3       	ldi	r30, 0x33	; 51
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_readPin+0xde>
    1964:	55 95       	asr	r21
    1966:	47 95       	ror	r20
    1968:	8a 95       	dec	r24
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_readPin+0xda>
    196c:	ca 01       	movw	r24, r20
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	88 23       	and	r24, r24
    1974:	19 f0       	breq	.+6      	; 0x197c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	19 c0       	rjmp	.+50     	; 0x19ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    197c:	19 82       	std	Y+1, r1	; 0x01
    197e:	17 c0       	rjmp	.+46     	; 0x19ae <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1980:	e0 e3       	ldi	r30, 0x30	; 48
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_readPin+0x10e>
    1994:	55 95       	asr	r21
    1996:	47 95       	ror	r20
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_readPin+0x10a>
    199c:	ca 01       	movw	r24, r20
    199e:	81 70       	andi	r24, 0x01	; 1
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	88 23       	and	r24, r24
    19a4:	19 f0       	breq	.+6      	; 0x19ac <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ac:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <GPIO_setupPortDirection+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_setupPortDirection+0x8>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	90 f5       	brcc	.+100    	; 0x1a3a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3c 83       	std	Y+4, r19	; 0x04
    19de:	2b 83       	std	Y+3, r18	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	d1 f0       	breq	.+52     	; 0x1a1e <GPIO_setupPortDirection+0x5e>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <GPIO_setupPortDirection+0x3e>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <GPIO_setupPortDirection+0x54>
    19fc:	1e c0       	rjmp	.+60     	; 0x1a3a <GPIO_setupPortDirection+0x7a>
    19fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1a00:	3c 81       	ldd	r19, Y+4	; 0x04
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	81 f0       	breq	.+32     	; 0x1a28 <GPIO_setupPortDirection+0x68>
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	81 f0       	breq	.+32     	; 0x1a32 <GPIO_setupPortDirection+0x72>
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a14:	ea e3       	ldi	r30, 0x3A	; 58
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	80 83       	st	Z, r24
    1a1c:	0e c0       	rjmp	.+28     	; 0x1a3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a1e:	e7 e3       	ldi	r30, 0x37	; 55
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	80 83       	st	Z, r24
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a28:	e4 e3       	ldi	r30, 0x34	; 52
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 83       	st	Z, r24
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a32:	e1 e3       	ldi	r30, 0x31	; 49
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <GPIO_writePort+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <GPIO_writePort+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	90 f5       	brcc	.+100    	; 0x1ac2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	d1 f0       	breq	.+52     	; 0x1aa6 <GPIO_writePort+0x5e>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <GPIO_writePort+0x3e>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 f0       	breq	.+24     	; 0x1a9c <GPIO_writePort+0x54>
    1a84:	1e c0       	rjmp	.+60     	; 0x1ac2 <GPIO_writePort+0x7a>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <GPIO_writePort+0x68>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	81 f0       	breq	.+32     	; 0x1aba <GPIO_writePort+0x72>
    1a9a:	13 c0       	rjmp	.+38     	; 0x1ac2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a9c:	eb e3       	ldi	r30, 0x3B	; 59
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	80 83       	st	Z, r24
    1aa4:	0e c0       	rjmp	.+28     	; 0x1ac2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 83       	st	Z, r24
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	80 83       	st	Z, r24
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aba:	e2 e3       	ldi	r30, 0x32	; 50
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <GPIO_readPort+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <GPIO_readPort+0x8>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ade:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	84 30       	cpi	r24, 0x04	; 4
    1ae4:	90 f5       	brcc	.+100    	; 0x1b4a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3c 83       	std	Y+4, r19	; 0x04
    1aee:	2b 83       	std	Y+3, r18	; 0x03
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	91 05       	cpc	r25, r1
    1af8:	d1 f0       	breq	.+52     	; 0x1b2e <GPIO_readPort+0x5e>
    1afa:	2b 81       	ldd	r18, Y+3	; 0x03
    1afc:	3c 81       	ldd	r19, Y+4	; 0x04
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <GPIO_readPort+0x3e>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	61 f0       	breq	.+24     	; 0x1b24 <GPIO_readPort+0x54>
    1b0c:	1e c0       	rjmp	.+60     	; 0x1b4a <GPIO_readPort+0x7a>
    1b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b10:	3c 81       	ldd	r19, Y+4	; 0x04
    1b12:	22 30       	cpi	r18, 0x02	; 2
    1b14:	31 05       	cpc	r19, r1
    1b16:	81 f0       	breq	.+32     	; 0x1b38 <GPIO_readPort+0x68>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	81 f0       	breq	.+32     	; 0x1b42 <GPIO_readPort+0x72>
    1b22:	13 c0       	rjmp	.+38     	; 0x1b4a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b24:	e9 e3       	ldi	r30, 0x39	; 57
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	0e c0       	rjmp	.+28     	; 0x1b4a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b2e:	e6 e3       	ldi	r30, 0x36	; 54
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b38:	e3 e3       	ldi	r30, 0x33	; 51
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b42:	e0 e3       	ldi	r30, 0x30	; 48
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <KEYPAD_getPressedKey+0x6>
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b68:	1b 82       	std	Y+3, r1	; 0x03
    1b6a:	43 c0       	rjmp	.+134    	; 0x1bf2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	98 2f       	mov	r25, r24
    1b78:	9c 5f       	subi	r25, 0xFC	; 252
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	69 2f       	mov	r22, r25
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	2c 5f       	subi	r18, 0xFC	; 252
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <KEYPAD_getPressedKey+0x40>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	2a 95       	dec	r18
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <KEYPAD_getPressedKey+0x3c>
    1b9e:	80 95       	com	r24
    1ba0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	69 81       	ldd	r22, Y+1	; 0x01
    1ba6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1baa:	1a 82       	std	Y+2, r1	; 0x02
    1bac:	1c c0       	rjmp	.+56     	; 0x1be6 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb2:	0e 94 45 0c 	call	0x188a	; 0x188a <GPIO_readPin>
    1bb6:	88 23       	and	r24, r24
    1bb8:	99 f4       	brne	.+38     	; 0x1be0 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	98 2f       	mov	r25, r24
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	89 0f       	add	r24, r25
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	08 f3       	brcs	.-62     	; 0x1bae <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <KEYPAD_getPressedKey+0xa0>
    1bf8:	b9 cf       	rjmp	.-142    	; 0x1b6c <KEYPAD_getPressedKey+0x12>
    1bfa:	b6 cf       	rjmp	.-148    	; 0x1b68 <KEYPAD_getPressedKey+0xe>

00001bfc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c0a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	3c 83       	std	Y+4, r19	; 0x04
    1c14:	2b 83       	std	Y+3, r18	; 0x03
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	88 30       	cpi	r24, 0x08	; 8
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c20:	70 c0       	rjmp	.+224    	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c22:	2b 81       	ldd	r18, Y+3	; 0x03
    1c24:	3c 81       	ldd	r19, Y+4	; 0x04
    1c26:	29 30       	cpi	r18, 0x09	; 9
    1c28:	31 05       	cpc	r19, r1
    1c2a:	5c f5       	brge	.+86     	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c36:	59 c0       	rjmp	.+178    	; 0x1cea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	25 30       	cpi	r18, 0x05	; 5
    1c3e:	31 05       	cpc	r19, r1
    1c40:	9c f4       	brge	.+38     	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c4c:	48 c0       	rjmp	.+144    	; 0x1cde <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	23 30       	cpi	r18, 0x03	; 3
    1c54:	31 05       	cpc	r19, r1
    1c56:	0c f0       	brlt	.+2      	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c58:	45 c0       	rjmp	.+138    	; 0x1ce4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c64:	39 c0       	rjmp	.+114    	; 0x1cd8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c66:	67 c0       	rjmp	.+206    	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6c:	26 30       	cpi	r18, 0x06	; 6
    1c6e:	31 05       	cpc	r19, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c72:	41 c0       	rjmp	.+130    	; 0x1cf6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	87 30       	cpi	r24, 0x07	; 7
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	0c f0       	brlt	.+2      	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c7e:	3e c0       	rjmp	.+124    	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c80:	37 c0       	rjmp	.+110    	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	2c 30       	cpi	r18, 0x0C	; 12
    1c88:	31 05       	cpc	r19, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c8c:	46 c0       	rjmp	.+140    	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	8d 30       	cpi	r24, 0x0D	; 13
    1c94:	91 05       	cpc	r25, r1
    1c96:	5c f4       	brge	.+22     	; 0x1cae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	2a 30       	cpi	r18, 0x0A	; 10
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	b1 f1       	breq	.+108    	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	8b 30       	cpi	r24, 0x0B	; 11
    1ca8:	91 05       	cpc	r25, r1
    1caa:	a4 f5       	brge	.+104    	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cac:	2d c0       	rjmp	.+90     	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	2e 30       	cpi	r18, 0x0E	; 14
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	b9 f1       	breq	.+110    	; 0x1d26 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	8e 30       	cpi	r24, 0x0E	; 14
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	7c f1       	brlt	.+94     	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc6:	2f 30       	cpi	r18, 0x0F	; 15
    1cc8:	31 05       	cpc	r19, r1
    1cca:	79 f1       	breq	.+94     	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	80 31       	cpi	r24, 0x10	; 16
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	69 f1       	breq	.+90     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1cd6:	2f c0       	rjmp	.+94     	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	2e c0       	rjmp	.+92     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cde:	88 e0       	ldi	r24, 0x08	; 8
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	2b c0       	rjmp	.+86     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1ce4:	89 e0       	ldi	r24, 0x09	; 9
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	28 c0       	rjmp	.+80     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cea:	85 e2       	ldi	r24, 0x25	; 37
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	25 c0       	rjmp	.+74     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	22 c0       	rjmp	.+68     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	1f c0       	rjmp	.+62     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cfc:	86 e0       	ldi	r24, 0x06	; 6
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	1c c0       	rjmp	.+56     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d02:	8a e2       	ldi	r24, 0x2A	; 42
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	19 c0       	rjmp	.+50     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	13 c0       	rjmp	.+38     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	10 c0       	rjmp	.+32     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d1a:	8d e2       	ldi	r24, 0x2D	; 45
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d20:	8d e0       	ldi	r24, 0x0D	; 13
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	0a c0       	rjmp	.+20     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d26:	19 82       	std	Y+1, r1	; 0x01
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d2a:	8d e3       	ldi	r24, 0x3D	; 61
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d30:	8b e2       	ldi	r24, 0x2B	; 43
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	6f ef       	ldi	r22, 0xFF	; 255
    1d74:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d78:	88 e3       	ldi	r24, 0x38	; 56
    1d7a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d7e:	8c e0       	ldi	r24, 0x0C	; 12
    1d80:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_sendCommand>
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	e9 97       	sbiw	r28, 0x39	; 57
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	8d ab       	std	Y+53, r24	; 0x35
    1dc4:	9e ab       	std	Y+54, r25	; 0x36
    1dc6:	af ab       	std	Y+55, r26	; 0x37
    1dc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6d a9       	ldd	r22, Y+53	; 0x35
    1dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dce:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	89 ab       	std	Y+49, r24	; 0x31
    1de4:	9a ab       	std	Y+50, r25	; 0x32
    1de6:	ab ab       	std	Y+51, r26	; 0x33
    1de8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dea:	69 a9       	ldd	r22, Y+49	; 0x31
    1dec:	7a a9       	ldd	r23, Y+50	; 0x32
    1dee:	8b a9       	ldd	r24, Y+51	; 0x33
    1df0:	9c a9       	ldd	r25, Y+52	; 0x34
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1e0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e10:	8b a9       	ldd	r24, Y+51	; 0x33
    1e12:	9c a9       	ldd	r25, Y+52	; 0x34
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6d a9       	ldd	r22, Y+53	; 0x35
    1e26:	7e a9       	ldd	r23, Y+54	; 0x36
    1e28:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_sendCommand+0xdc>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9e a7       	std	Y+46, r25	; 0x2e
    1e54:	8d a7       	std	Y+45, r24	; 0x2d
    1e56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_sendCommand+0xca>
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e64:	98 a9       	ldd	r25, Y+48	; 0x30
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	98 ab       	std	Y+48, r25	; 0x30
    1e6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_sendCommand+0xbe>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	69 a9       	ldd	r22, Y+49	; 0x31
    1e78:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8e:	9c a7       	std	Y+44, r25	; 0x2c
    1e90:	8b a7       	std	Y+43, r24	; 0x2b
    1e92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_sendCommand+0x106>
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e8       	ldi	r26, 0x80	; 128
    1eae:	bf e3       	ldi	r27, 0x3F	; 63
    1eb0:	8f a3       	std	Y+39, r24	; 0x27
    1eb2:	98 a7       	std	Y+40, r25	; 0x28
    1eb4:	a9 a7       	std	Y+41, r26	; 0x29
    1eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eba:	78 a5       	ldd	r23, Y+40	; 0x28
    1ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8b a3       	std	Y+35, r24	; 0x23
    1ed2:	9c a3       	std	Y+36, r25	; 0x24
    1ed4:	ad a3       	std	Y+37, r26	; 0x25
    1ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <LCD_sendCommand+0x16a>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1efa:	6b a1       	ldd	r22, Y+35	; 0x23
    1efc:	7c a1       	ldd	r23, Y+36	; 0x24
    1efe:	8d a1       	ldd	r24, Y+37	; 0x25
    1f00:	9e a1       	ldd	r25, Y+38	; 0x26
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6f a1       	ldd	r22, Y+39	; 0x27
    1f14:	78 a5       	ldd	r23, Y+40	; 0x28
    1f16:	89 a5       	ldd	r24, Y+41	; 0x29
    1f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <LCD_sendCommand+0x1ca>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	98 a3       	std	Y+32, r25	; 0x20
    1f42:	8f 8f       	std	Y+31, r24	; 0x1f
    1f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f46:	98 a1       	ldd	r25, Y+32	; 0x20
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_sendCommand+0x1b8>
    1f4c:	98 a3       	std	Y+32, r25	; 0x20
    1f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <LCD_sendCommand+0x1ac>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6b a1       	ldd	r22, Y+35	; 0x23
    1f66:	7c a1       	ldd	r23, Y+36	; 0x24
    1f68:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_sendCommand+0x1f4>
    1f88:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f90:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePort>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e8       	ldi	r26, 0x80	; 128
    1f9a:	bf e3       	ldi	r27, 0x3F	; 63
    1f9c:	89 8f       	std	Y+25, r24	; 0x19
    1f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8d 8b       	std	Y+21, r24	; 0x15
    1fbe:	9e 8b       	std	Y+22, r25	; 0x16
    1fc0:	af 8b       	std	Y+23, r26	; 0x17
    1fc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <LCD_sendCommand+0x256>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <LCD_sendCommand+0x2b6>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	89 8b       	std	Y+17, r24	; 0x11
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	9a 89       	ldd	r25, Y+18	; 0x12
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_sendCommand+0x2a4>
    2038:	9a 8b       	std	Y+18, r25	; 0x12
    203a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <LCD_sendCommand+0x298>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6d 89       	ldd	r22, Y+21	; 0x15
    2052:	7e 89       	ldd	r23, Y+22	; 0x16
    2054:	8f 89       	ldd	r24, Y+23	; 0x17
    2056:	98 8d       	ldd	r25, Y+24	; 0x18
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	98 8b       	std	Y+16, r25	; 0x10
    206a:	8f 87       	std	Y+15, r24	; 0x0f
    206c:	8f 85       	ldd	r24, Y+15	; 0x0f
    206e:	98 89       	ldd	r25, Y+16	; 0x10
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_sendCommand+0x2e0>
    2074:	98 8b       	std	Y+16, r25	; 0x10
    2076:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	62 e0       	ldi	r22, 0x02	; 2
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_sendCommand+0x344>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_sendCommand+0x3a4>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_sendCommand+0x392>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_sendCommand+0x386>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendCommand+0x3ce>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2166:	e9 96       	adiw	r28, 0x39	; 57
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	e9 97       	sbiw	r28, 0x39	; 57
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e8       	ldi	r26, 0x80	; 128
    21a8:	bf e3       	ldi	r27, 0x3F	; 63
    21aa:	8d ab       	std	Y+53, r24	; 0x35
    21ac:	9e ab       	std	Y+54, r25	; 0x36
    21ae:	af ab       	std	Y+55, r26	; 0x37
    21b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6d a9       	ldd	r22, Y+53	; 0x35
    21b4:	7e a9       	ldd	r23, Y+54	; 0x36
    21b6:	8f a9       	ldd	r24, Y+55	; 0x37
    21b8:	98 ad       	ldd	r25, Y+56	; 0x38
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	89 ab       	std	Y+49, r24	; 0x31
    21cc:	9a ab       	std	Y+50, r25	; 0x32
    21ce:	ab ab       	std	Y+51, r26	; 0x33
    21d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21d2:	69 a9       	ldd	r22, Y+49	; 0x31
    21d4:	7a a9       	ldd	r23, Y+50	; 0x32
    21d6:	8b a9       	ldd	r24, Y+51	; 0x33
    21d8:	9c a9       	ldd	r25, Y+52	; 0x34
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    21f4:	69 a9       	ldd	r22, Y+49	; 0x31
    21f6:	7a a9       	ldd	r23, Y+50	; 0x32
    21f8:	8b a9       	ldd	r24, Y+51	; 0x33
    21fa:	9c a9       	ldd	r25, Y+52	; 0x34
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6d a9       	ldd	r22, Y+53	; 0x35
    220e:	7e a9       	ldd	r23, Y+54	; 0x36
    2210:	8f a9       	ldd	r24, Y+55	; 0x37
    2212:	98 ad       	ldd	r25, Y+56	; 0x38
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	98 ab       	std	Y+48, r25	; 0x30
    2232:	8f a7       	std	Y+47, r24	; 0x2f
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_displayCharacter+0xdc>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e a7       	std	Y+46, r25	; 0x2e
    223c:	8d a7       	std	Y+45, r24	; 0x2d
    223e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2240:	9e a5       	ldd	r25, Y+46	; 0x2e
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_displayCharacter+0xca>
    2246:	9e a7       	std	Y+46, r25	; 0x2e
    2248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8f a5       	ldd	r24, Y+47	; 0x2f
    224c:	98 a9       	ldd	r25, Y+48	; 0x30
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	98 ab       	std	Y+48, r25	; 0x30
    2252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_displayCharacter+0xbe>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	69 a9       	ldd	r22, Y+49	; 0x31
    2260:	7a a9       	ldd	r23, Y+50	; 0x32
    2262:	8b a9       	ldd	r24, Y+51	; 0x33
    2264:	9c a9       	ldd	r25, Y+52	; 0x34
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	98 ab       	std	Y+48, r25	; 0x30
    2270:	8f a7       	std	Y+47, r24	; 0x2f
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	9c a7       	std	Y+44, r25	; 0x2c
    2278:	8b a7       	std	Y+43, r24	; 0x2b
    227a:	8b a5       	ldd	r24, Y+43	; 0x2b
    227c:	9c a5       	ldd	r25, Y+44	; 0x2c
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_displayCharacter+0x106>
    2282:	9c a7       	std	Y+44, r25	; 0x2c
    2284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	bf e3       	ldi	r27, 0x3F	; 63
    2298:	8f a3       	std	Y+39, r24	; 0x27
    229a:	98 a7       	std	Y+40, r25	; 0x28
    229c:	a9 a7       	std	Y+41, r26	; 0x29
    229e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	6f a1       	ldd	r22, Y+39	; 0x27
    22a2:	78 a5       	ldd	r23, Y+40	; 0x28
    22a4:	89 a5       	ldd	r24, Y+41	; 0x29
    22a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a ef       	ldi	r20, 0xFA	; 250
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8b a3       	std	Y+35, r24	; 0x23
    22ba:	9c a3       	std	Y+36, r25	; 0x24
    22bc:	ad a3       	std	Y+37, r26	; 0x25
    22be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22c0:	6b a1       	ldd	r22, Y+35	; 0x23
    22c2:	7c a1       	ldd	r23, Y+36	; 0x24
    22c4:	8d a1       	ldd	r24, Y+37	; 0x25
    22c6:	9e a1       	ldd	r25, Y+38	; 0x26
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    22e2:	6b a1       	ldd	r22, Y+35	; 0x23
    22e4:	7c a1       	ldd	r23, Y+36	; 0x24
    22e6:	8d a1       	ldd	r24, Y+37	; 0x25
    22e8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	4c f5       	brge	.+82     	; 0x234c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	6f a1       	ldd	r22, Y+39	; 0x27
    22fc:	78 a5       	ldd	r23, Y+40	; 0x28
    22fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2300:	9a a5       	ldd	r25, Y+42	; 0x2a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9a a3       	std	Y+34, r25	; 0x22
    2320:	89 a3       	std	Y+33, r24	; 0x21
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_displayCharacter+0x1ca>
    2324:	88 ec       	ldi	r24, 0xC8	; 200
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	98 a3       	std	Y+32, r25	; 0x20
    232a:	8f 8f       	std	Y+31, r24	; 0x1f
    232c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232e:	98 a1       	ldd	r25, Y+32	; 0x20
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_displayCharacter+0x1b8>
    2334:	98 a3       	std	Y+32, r25	; 0x20
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	89 a1       	ldd	r24, Y+33	; 0x21
    233a:	9a a1       	ldd	r25, Y+34	; 0x22
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_displayCharacter+0x1ac>
    234a:	14 c0       	rjmp	.+40     	; 0x2374 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9a a3       	std	Y+34, r25	; 0x22
    235e:	89 a3       	std	Y+33, r24	; 0x21
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	9e 8f       	std	Y+30, r25	; 0x1e
    2366:	8d 8f       	std	Y+29, r24	; 0x1d
    2368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    236a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_displayCharacter+0x1f4>
    2370:	9e 8f       	std	Y+30, r25	; 0x1e
    2372:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	69 ad       	ldd	r22, Y+57	; 0x39
    2378:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePort>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a0 e8       	ldi	r26, 0x80	; 128
    2382:	bf e3       	ldi	r27, 0x3F	; 63
    2384:	89 8f       	std	Y+25, r24	; 0x19
    2386:	9a 8f       	std	Y+26, r25	; 0x1a
    2388:	ab 8f       	std	Y+27, r26	; 0x1b
    238a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238c:	69 8d       	ldd	r22, Y+25	; 0x19
    238e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a ef       	ldi	r20, 0xFA	; 250
    239a:	54 e4       	ldi	r21, 0x44	; 68
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8d 8b       	std	Y+21, r24	; 0x15
    23a6:	9e 8b       	std	Y+22, r25	; 0x16
    23a8:	af 8b       	std	Y+23, r26	; 0x17
    23aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	2c f4       	brge	.+10     	; 0x23ce <LCD_displayCharacter+0x256>
		__ticks = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9c 8b       	std	Y+20, r25	; 0x14
    23ca:	8b 8b       	std	Y+19, r24	; 0x13
    23cc:	3f c0       	rjmp	.+126    	; 0x244c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    23ce:	6d 89       	ldd	r22, Y+21	; 0x15
    23d0:	7e 89       	ldd	r23, Y+22	; 0x16
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	4c f5       	brge	.+82     	; 0x2438 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e6:	69 8d       	ldd	r22, Y+25	; 0x19
    23e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9c 8b       	std	Y+20, r25	; 0x14
    240c:	8b 8b       	std	Y+19, r24	; 0x13
    240e:	0f c0       	rjmp	.+30     	; 0x242e <LCD_displayCharacter+0x2b6>
    2410:	88 ec       	ldi	r24, 0xC8	; 200
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9a 8b       	std	Y+18, r25	; 0x12
    2416:	89 8b       	std	Y+17, r24	; 0x11
    2418:	89 89       	ldd	r24, Y+17	; 0x11
    241a:	9a 89       	ldd	r25, Y+18	; 0x12
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_displayCharacter+0x2a4>
    2420:	9a 8b       	std	Y+18, r25	; 0x12
    2422:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	8b 89       	ldd	r24, Y+19	; 0x13
    2426:	9c 89       	ldd	r25, Y+20	; 0x14
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	9c 8b       	std	Y+20, r25	; 0x14
    242c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	8b 89       	ldd	r24, Y+19	; 0x13
    2430:	9c 89       	ldd	r25, Y+20	; 0x14
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f7       	brne	.-38     	; 0x2410 <LCD_displayCharacter+0x298>
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	98 8b       	std	Y+16, r25	; 0x10
    2452:	8f 87       	std	Y+15, r24	; 0x0f
    2454:	8f 85       	ldd	r24, Y+15	; 0x0f
    2456:	98 89       	ldd	r25, Y+16	; 0x10
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_displayCharacter+0x2e0>
    245c:	98 8b       	std	Y+16, r25	; 0x10
    245e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_writePin>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e8       	ldi	r26, 0x80	; 128
    2470:	bf e3       	ldi	r27, 0x3F	; 63
    2472:	8b 87       	std	Y+11, r24	; 0x0b
    2474:	9c 87       	std	Y+12, r25	; 0x0c
    2476:	ad 87       	std	Y+13, r26	; 0x0d
    2478:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a ef       	ldi	r20, 0xFA	; 250
    2488:	54 e4       	ldi	r21, 0x44	; 68
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	8f 83       	std	Y+7, r24	; 0x07
    2494:	98 87       	std	Y+8, r25	; 0x08
    2496:	a9 87       	std	Y+9, r26	; 0x09
    2498:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ae:	88 23       	and	r24, r24
    24b0:	2c f4       	brge	.+10     	; 0x24bc <LCD_displayCharacter+0x344>
		__ticks = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	3f c0       	rjmp	.+126    	; 0x253a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	4c f5       	brge	.+82     	; 0x2526 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e2       	ldi	r20, 0x20	; 32
    24e2:	51 e4       	ldi	r21, 0x41	; 65
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <LCD_displayCharacter+0x3a4>
    24fe:	88 ec       	ldi	r24, 0xC8	; 200
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_displayCharacter+0x392>
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	69 f7       	brne	.-38     	; 0x24fe <LCD_displayCharacter+0x386>
    2524:	14 c0       	rjmp	.+40     	; 0x254e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_displayCharacter+0x3ce>
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    254e:	e9 96       	adiw	r28, 0x39	; 57
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <LCD_displayString+0x6>
    2566:	0f 92       	push	r0
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	9b 83       	std	Y+3, r25	; 0x03
    256e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2570:	19 82       	std	Y+1, r1	; 0x01
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	80 81       	ld	r24, Z
    2586:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayCharacter>
		i++;
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	9b 81       	ldd	r25, Y+3	; 0x03
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	80 81       	ld	r24, Z
    25a2:	88 23       	and	r24, r24
    25a4:	39 f7       	brne	.-50     	; 0x2574 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <LCD_moveCursor+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <LCD_moveCursor+0x8>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	3d 83       	std	Y+5, r19	; 0x05
    25cc:	2c 83       	std	Y+4, r18	; 0x04
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	9d 81       	ldd	r25, Y+5	; 0x05
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	91 05       	cpc	r25, r1
    25d6:	c1 f0       	breq	.+48     	; 0x2608 <LCD_moveCursor+0x56>
    25d8:	2c 81       	ldd	r18, Y+4	; 0x04
    25da:	3d 81       	ldd	r19, Y+5	; 0x05
    25dc:	22 30       	cpi	r18, 0x02	; 2
    25de:	31 05       	cpc	r19, r1
    25e0:	2c f4       	brge	.+10     	; 0x25ec <LCD_moveCursor+0x3a>
    25e2:	8c 81       	ldd	r24, Y+4	; 0x04
    25e4:	9d 81       	ldd	r25, Y+5	; 0x05
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	61 f0       	breq	.+24     	; 0x2602 <LCD_moveCursor+0x50>
    25ea:	19 c0       	rjmp	.+50     	; 0x261e <LCD_moveCursor+0x6c>
    25ec:	2c 81       	ldd	r18, Y+4	; 0x04
    25ee:	3d 81       	ldd	r19, Y+5	; 0x05
    25f0:	22 30       	cpi	r18, 0x02	; 2
    25f2:	31 05       	cpc	r19, r1
    25f4:	69 f0       	breq	.+26     	; 0x2610 <LCD_moveCursor+0x5e>
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	83 30       	cpi	r24, 0x03	; 3
    25fc:	91 05       	cpc	r25, r1
    25fe:	61 f0       	breq	.+24     	; 0x2618 <LCD_moveCursor+0x66>
    2600:	0e c0       	rjmp	.+28     	; 0x261e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	0b c0       	rjmp	.+22     	; 0x261e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	80 5c       	subi	r24, 0xC0	; 192
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	07 c0       	rjmp	.+14     	; 0x261e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	80 5f       	subi	r24, 0xF0	; 240
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	03 c0       	rjmp	.+6      	; 0x261e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	80 5b       	subi	r24, 0xB0	; 176
    261c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_sendCommand>
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <LCD_displayStringRowColumn+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <LCD_displayStringRowColumn+0x8>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	6a 83       	std	Y+2, r22	; 0x02
    2646:	5c 83       	std	Y+4, r21	; 0x04
    2648:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	6a 81       	ldd	r22, Y+2	; 0x02
    264e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_displayString>
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	62 97       	sbiw	r28, 0x12	; 18
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	9a 8b       	std	Y+18, r25	; 0x12
    267e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2680:	89 89       	ldd	r24, Y+17	; 0x11
    2682:	9a 89       	ldd	r25, Y+18	; 0x12
    2684:	9e 01       	movw	r18, r28
    2686:	2f 5f       	subi	r18, 0xFF	; 255
    2688:	3f 4f       	sbci	r19, 0xFF	; 255
    268a:	b9 01       	movw	r22, r18
    268c:	4a e0       	ldi	r20, 0x0A	; 10
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <itoa>
   LCD_displayString(buff); /* Display the string */
    2694:	ce 01       	movw	r24, r28
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_displayString>
}
    269c:	62 96       	adiw	r28, 0x12	; 18
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_sendCommand>
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect){
    26c2:	1f 92       	push	r1
    26c4:	0f 92       	push	r0
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	0f 92       	push	r0
    26ca:	11 24       	eor	r1, r1
    26cc:	2f 93       	push	r18
    26ce:	3f 93       	push	r19
    26d0:	4f 93       	push	r20
    26d2:	5f 93       	push	r21
    26d4:	6f 93       	push	r22
    26d6:	7f 93       	push	r23
    26d8:	8f 93       	push	r24
    26da:	9f 93       	push	r25
    26dc:	af 93       	push	r26
    26de:	bf 93       	push	r27
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    26ec:	80 91 0d 01 	lds	r24, 0x010D
    26f0:	90 91 0e 01 	lds	r25, 0x010E
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	29 f0       	breq	.+10     	; 0x2702 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    26f8:	e0 91 0d 01 	lds	r30, 0x010D
    26fc:	f0 91 0e 01 	lds	r31, 0x010E
    2700:	09 95       	icall
	}
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	ff 91       	pop	r31
    2708:	ef 91       	pop	r30
    270a:	bf 91       	pop	r27
    270c:	af 91       	pop	r26
    270e:	9f 91       	pop	r25
    2710:	8f 91       	pop	r24
    2712:	7f 91       	pop	r23
    2714:	6f 91       	pop	r22
    2716:	5f 91       	pop	r21
    2718:	4f 91       	pop	r20
    271a:	3f 91       	pop	r19
    271c:	2f 91       	pop	r18
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0f 90       	pop	r0
    2724:	1f 90       	pop	r1
    2726:	18 95       	reti

00002728 <__vector_9>:
ISR(TIMER1_OVF_vect){
    2728:	1f 92       	push	r1
    272a:	0f 92       	push	r0
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	0f 92       	push	r0
    2730:	11 24       	eor	r1, r1
    2732:	2f 93       	push	r18
    2734:	3f 93       	push	r19
    2736:	4f 93       	push	r20
    2738:	5f 93       	push	r21
    273a:	6f 93       	push	r22
    273c:	7f 93       	push	r23
    273e:	8f 93       	push	r24
    2740:	9f 93       	push	r25
    2742:	af 93       	push	r26
    2744:	bf 93       	push	r27
    2746:	ef 93       	push	r30
    2748:	ff 93       	push	r31
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    2752:	80 91 0d 01 	lds	r24, 0x010D
    2756:	90 91 0e 01 	lds	r25, 0x010E
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	29 f0       	breq	.+10     	; 0x2768 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    275e:	e0 91 0d 01 	lds	r30, 0x010D
    2762:	f0 91 0e 01 	lds	r31, 0x010E
    2766:	09 95       	icall
	}
}
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	ff 91       	pop	r31
    276e:	ef 91       	pop	r30
    2770:	bf 91       	pop	r27
    2772:	af 91       	pop	r26
    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	7f 91       	pop	r23
    277a:	6f 91       	pop	r22
    277c:	5f 91       	pop	r21
    277e:	4f 91       	pop	r20
    2780:	3f 91       	pop	r19
    2782:	2f 91       	pop	r18
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

0000278e <Timer1_init>:
 *******************************************************************************/

/*
* Description : Function to initialize the Timer driver
*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <Timer1_init+0x6>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;   /* Set timer1 initial value */
    279c:	ac e4       	ldi	r26, 0x4C	; 76
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e9 81       	ldd	r30, Y+1	; 0x01
    27a2:	fa 81       	ldd	r31, Y+2	; 0x02
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	9c 93       	st	X, r25
    27ac:	8e 93       	st	-X, r24

	/* Configure timer control register TCCR1A
	    * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		* 2. FOC1A=1 FOC1B=1
	 */
	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    27ae:	ef e4       	ldi	r30, 0x4F	; 79
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	8c e0       	ldi	r24, 0x0C	; 12
    27b4:	80 83       	st	Z, r24

	/*Set Timer Mode*/
	if (Config_Ptr->mode == COMPARE) {
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	85 81       	ldd	r24, Z+5	; 0x05
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	a9 f4       	brne	.+42     	; 0x27ea <Timer1_init+0x5c>
		 /*for compare match mode WGM10=0,WGM11=0,WGM12=1,WGM13=0 */
		TCCR1B = (1 << WGM12);
    27c0:	ee e4       	ldi	r30, 0x4E	; 78
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	88 e0       	ldi	r24, 0x08	; 8
    27c6:	80 83       	st	Z, r24
		/*insert the required compare match value in OCR1A Register*/
		OCR1A = Config_Ptr->compare_value;
    27c8:	aa e4       	ldi	r26, 0x4A	; 74
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e9 81       	ldd	r30, Y+1	; 0x01
    27ce:	fa 81       	ldd	r31, Y+2	; 0x02
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	9c 93       	st	X, r25
    27d8:	8e 93       	st	-X, r24
		/* Enable the compare match interrupt to generate an interrupt when compare match occurs*/
		SET_BIT(TIMSK, OCIE1A);
    27da:	a9 e5       	ldi	r26, 0x59	; 89
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e9 e5       	ldi	r30, 0x59	; 89
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 61       	ori	r24, 0x10	; 16
    27e6:	8c 93       	st	X, r24
    27e8:	0c c0       	rjmp	.+24     	; 0x2802 <Timer1_init+0x74>
	} else if (Config_Ptr->mode == NORMAL) {
    27ea:	e9 81       	ldd	r30, Y+1	; 0x01
    27ec:	fa 81       	ldd	r31, Y+2	; 0x02
    27ee:	85 81       	ldd	r24, Z+5	; 0x05
    27f0:	88 23       	and	r24, r24
    27f2:	39 f4       	brne	.+14     	; 0x2802 <Timer1_init+0x74>
		/* Enable the overflow interrupt to generate an interrupt when overflow occurs*/
		SET_BIT(TIMSK, TOIE1);
    27f4:	a9 e5       	ldi	r26, 0x59	; 89
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e9 e5       	ldi	r30, 0x59	; 89
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	84 60       	ori	r24, 0x04	; 4
    2800:	8c 93       	st	X, r24
	}

	/* insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register*/
	TCCR1B = (TCCR1B & 0XF8) | (Config_Ptr->prescaler & 0x07);
    2802:	ae e4       	ldi	r26, 0x4E	; 78
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ee e4       	ldi	r30, 0x4E	; 78
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	98 2f       	mov	r25, r24
    280e:	98 7f       	andi	r25, 0xF8	; 248
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	84 81       	ldd	r24, Z+4	; 0x04
    2816:	87 70       	andi	r24, 0x07	; 7
    2818:	89 2b       	or	r24, r25
    281a:	8c 93       	st	X, r24

}
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <Timer1_deInit>:

/*
 * Description: Function to disable the Timer1.
 */
void Timer1_deInit(void){
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62

	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    282e:	ef e4       	ldi	r30, 0x4F	; 79
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	10 82       	st	Z, r1
	TCCR1B = 0;
    2834:	ee e4       	ldi	r30, 0x4E	; 78
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	10 82       	st	Z, r1
	TCNT1 = 0;
    283a:	ec e4       	ldi	r30, 0x4C	; 76
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	11 82       	std	Z+1, r1	; 0x01
    2840:	10 82       	st	Z, r1
	ICR1 = 0;
    2842:	e6 e4       	ldi	r30, 0x46	; 70
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	11 82       	std	Z+1, r1	; 0x01
    2848:	10 82       	st	Z, r1
	/* Disable the interrupt */
	TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    284a:	a9 e5       	ldi	r26, 0x59	; 89
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e9 e5       	ldi	r30, 0x59	; 89
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8b 7e       	andi	r24, 0xEB	; 235
    2856:	8c 93       	st	X, r24

}
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <Timer1_setCallBack+0x6>
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	90 93 0e 01 	sts	0x010E, r25
    2874:	80 93 0d 01 	sts	0x010D, r24

}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <UART_init+0x6>
    2888:	00 d0       	rcall	.+0      	; 0x288a <UART_init+0x8>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2892:	1a 82       	std	Y+2, r1	; 0x02
    2894:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2896:	eb e2       	ldi	r30, 0x2B	; 43
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    289e:	ea e2       	ldi	r30, 0x2A	; 42
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	88 e1       	ldi	r24, 0x18	; 24
    28a4:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    28a6:	e0 e4       	ldi	r30, 0x40	; 64
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	80 83       	st	Z, r24
	/*
     * insert the required bit data in UCSRC Register
	 */
	UCSRC=(UCSRC&0XF9)|((Config_Ptr->bit_data&0X03)<<1);
    28ae:	a0 e4       	ldi	r26, 0x40	; 64
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e0 e4       	ldi	r30, 0x40	; 64
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	28 2f       	mov	r18, r24
    28ba:	29 7f       	andi	r18, 0xF9	; 249
    28bc:	eb 81       	ldd	r30, Y+3	; 0x03
    28be:	fc 81       	ldd	r31, Y+4	; 0x04
    28c0:	80 81       	ld	r24, Z
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	83 70       	andi	r24, 0x03	; 3
    28c8:	90 70       	andi	r25, 0x00	; 0
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	82 2b       	or	r24, r18
    28d0:	8c 93       	st	X, r24

	/*
     * insert the required parity mode in UCSRC Register
	 */
	UCSRC=(UCSRC&0XCF)|((Config_Ptr->parity&0X03)<<4);
    28d2:	a0 e4       	ldi	r26, 0x40	; 64
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e0 e4       	ldi	r30, 0x40	; 64
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	28 2f       	mov	r18, r24
    28de:	2f 7c       	andi	r18, 0xCF	; 207
    28e0:	eb 81       	ldd	r30, Y+3	; 0x03
    28e2:	fc 81       	ldd	r31, Y+4	; 0x04
    28e4:	81 81       	ldd	r24, Z+1	; 0x01
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	83 70       	andi	r24, 0x03	; 3
    28ec:	90 70       	andi	r25, 0x00	; 0
    28ee:	82 95       	swap	r24
    28f0:	92 95       	swap	r25
    28f2:	90 7f       	andi	r25, 0xF0	; 240
    28f4:	98 27       	eor	r25, r24
    28f6:	80 7f       	andi	r24, 0xF0	; 240
    28f8:	98 27       	eor	r25, r24
    28fa:	82 2b       	or	r24, r18
    28fc:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    28fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2900:	fc 81       	ldd	r31, Y+4	; 0x04
    2902:	83 81       	ldd	r24, Z+3	; 0x03
    2904:	94 81       	ldd	r25, Z+4	; 0x04
    2906:	cc 01       	movw	r24, r24
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	aa 1f       	adc	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	aa 1f       	adc	r26, r26
    291a:	bb 1f       	adc	r27, r27
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	aa 1f       	adc	r26, r26
    2922:	bb 1f       	adc	r27, r27
    2924:	9c 01       	movw	r18, r24
    2926:	ad 01       	movw	r20, r26
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	92 e1       	ldi	r25, 0x12	; 18
    292c:	aa e7       	ldi	r26, 0x7A	; 122
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodsi4>
    2938:	da 01       	movw	r26, r20
    293a:	c9 01       	movw	r24, r18
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9a 83       	std	Y+2, r25	; 0x02
    2940:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2942:	e0 e4       	ldi	r30, 0x40	; 64
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	89 2f       	mov	r24, r25
    294c:	99 27       	eor	r25, r25
    294e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2950:	e9 e2       	ldi	r30, 0x29	; 41
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	80 83       	st	Z, r24
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	0f 92       	push	r0
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2972:	eb e2       	ldi	r30, 0x2B	; 43
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	80 72       	andi	r24, 0x20	; 32
    297e:	90 70       	andi	r25, 0x00	; 0
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	b9 f3       	breq	.-18     	; 0x2972 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2984:	ec e2       	ldi	r30, 0x2C	; 44
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    298c:	0f 90       	pop	r0
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    299c:	eb e2       	ldi	r30, 0x2B	; 43
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	88 23       	and	r24, r24
    29a4:	dc f7       	brge	.-10     	; 0x299c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    29a6:	ec e2       	ldi	r30, 0x2C	; 44
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
}
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29b2:	df 93       	push	r29
    29b4:	cf 93       	push	r28
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <UART_sendString+0x6>
    29b8:	0f 92       	push	r0
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	9b 83       	std	Y+3, r25	; 0x03
    29c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29c2:	19 82       	std	Y+1, r1	; 0x01
    29c4:	0e c0       	rjmp	.+28     	; 0x29e2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	fc 01       	movw	r30, r24
    29d2:	e2 0f       	add	r30, r18
    29d4:	f3 1f       	adc	r31, r19
    29d6:	80 81       	ld	r24, Z
    29d8:	0e 94 b3 14 	call	0x2966	; 0x2966 <UART_sendByte>
		i++;
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	88 23       	and	r24, r24
    29f6:	39 f7       	brne	.-50     	; 0x29c6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <UART_receiveString+0xa>
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9b 83       	std	Y+3, r25	; 0x03
    2a16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a18:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	9b 81       	ldd	r25, Y+3	; 0x03
    2a24:	8c 01       	movw	r16, r24
    2a26:	02 0f       	add	r16, r18
    2a28:	13 1f       	adc	r17, r19
    2a2a:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
    2a2e:	f8 01       	movw	r30, r16
    2a30:	80 83       	st	Z, r24
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	8f 5f       	subi	r24, 0xFF	; 255
    2a38:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	8c 01       	movw	r16, r24
    2a46:	02 0f       	add	r16, r18
    2a48:	13 1f       	adc	r17, r19
    2a4a:	0e 94 ca 14 	call	0x2994	; 0x2994 <UART_recieveByte>
    2a4e:	f8 01       	movw	r30, r16
    2a50:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	e2 0f       	add	r30, r18
    2a60:	f3 1f       	adc	r31, r19
    2a62:	80 81       	ld	r24, Z
    2a64:	83 32       	cpi	r24, 0x23	; 35
    2a66:	31 f7       	brne	.-52     	; 0x2a34 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	9b 81       	ldd	r25, Y+3	; 0x03
    2a72:	fc 01       	movw	r30, r24
    2a74:	e2 0f       	add	r30, r18
    2a76:	f3 1f       	adc	r31, r19
    2a78:	10 82       	st	Z, r1
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <__udivmodsi4>:
    2a8a:	a1 e2       	ldi	r26, 0x21	; 33
    2a8c:	1a 2e       	mov	r1, r26
    2a8e:	aa 1b       	sub	r26, r26
    2a90:	bb 1b       	sub	r27, r27
    2a92:	fd 01       	movw	r30, r26
    2a94:	0d c0       	rjmp	.+26     	; 0x2ab0 <__udivmodsi4_ep>

00002a96 <__udivmodsi4_loop>:
    2a96:	aa 1f       	adc	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	ee 1f       	adc	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	a2 17       	cp	r26, r18
    2aa0:	b3 07       	cpc	r27, r19
    2aa2:	e4 07       	cpc	r30, r20
    2aa4:	f5 07       	cpc	r31, r21
    2aa6:	20 f0       	brcs	.+8      	; 0x2ab0 <__udivmodsi4_ep>
    2aa8:	a2 1b       	sub	r26, r18
    2aaa:	b3 0b       	sbc	r27, r19
    2aac:	e4 0b       	sbc	r30, r20
    2aae:	f5 0b       	sbc	r31, r21

00002ab0 <__udivmodsi4_ep>:
    2ab0:	66 1f       	adc	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	1a 94       	dec	r1
    2aba:	69 f7       	brne	.-38     	; 0x2a96 <__udivmodsi4_loop>
    2abc:	60 95       	com	r22
    2abe:	70 95       	com	r23
    2ac0:	80 95       	com	r24
    2ac2:	90 95       	com	r25
    2ac4:	9b 01       	movw	r18, r22
    2ac6:	ac 01       	movw	r20, r24
    2ac8:	bd 01       	movw	r22, r26
    2aca:	cf 01       	movw	r24, r30
    2acc:	08 95       	ret

00002ace <__prologue_saves__>:
    2ace:	2f 92       	push	r2
    2ad0:	3f 92       	push	r3
    2ad2:	4f 92       	push	r4
    2ad4:	5f 92       	push	r5
    2ad6:	6f 92       	push	r6
    2ad8:	7f 92       	push	r7
    2ada:	8f 92       	push	r8
    2adc:	9f 92       	push	r9
    2ade:	af 92       	push	r10
    2ae0:	bf 92       	push	r11
    2ae2:	cf 92       	push	r12
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	ca 1b       	sub	r28, r26
    2af8:	db 0b       	sbc	r29, r27
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	09 94       	ijmp

00002b06 <__epilogue_restores__>:
    2b06:	2a 88       	ldd	r2, Y+18	; 0x12
    2b08:	39 88       	ldd	r3, Y+17	; 0x11
    2b0a:	48 88       	ldd	r4, Y+16	; 0x10
    2b0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b18:	b9 84       	ldd	r11, Y+9	; 0x09
    2b1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b1c:	df 80       	ldd	r13, Y+7	; 0x07
    2b1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2b20:	fd 80       	ldd	r15, Y+5	; 0x05
    2b22:	0c 81       	ldd	r16, Y+4	; 0x04
    2b24:	1b 81       	ldd	r17, Y+3	; 0x03
    2b26:	aa 81       	ldd	r26, Y+2	; 0x02
    2b28:	b9 81       	ldd	r27, Y+1	; 0x01
    2b2a:	ce 0f       	add	r28, r30
    2b2c:	d1 1d       	adc	r29, r1
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	ed 01       	movw	r28, r26
    2b3a:	08 95       	ret

00002b3c <itoa>:
    2b3c:	fb 01       	movw	r30, r22
    2b3e:	9f 01       	movw	r18, r30
    2b40:	e8 94       	clt
    2b42:	42 30       	cpi	r20, 0x02	; 2
    2b44:	c4 f0       	brlt	.+48     	; 0x2b76 <itoa+0x3a>
    2b46:	45 32       	cpi	r20, 0x25	; 37
    2b48:	b4 f4       	brge	.+44     	; 0x2b76 <itoa+0x3a>
    2b4a:	4a 30       	cpi	r20, 0x0A	; 10
    2b4c:	29 f4       	brne	.+10     	; 0x2b58 <itoa+0x1c>
    2b4e:	97 fb       	bst	r25, 7
    2b50:	1e f4       	brtc	.+6      	; 0x2b58 <itoa+0x1c>
    2b52:	90 95       	com	r25
    2b54:	81 95       	neg	r24
    2b56:	9f 4f       	sbci	r25, 0xFF	; 255
    2b58:	64 2f       	mov	r22, r20
    2b5a:	77 27       	eor	r23, r23
    2b5c:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__udivmodhi4>
    2b60:	80 5d       	subi	r24, 0xD0	; 208
    2b62:	8a 33       	cpi	r24, 0x3A	; 58
    2b64:	0c f0       	brlt	.+2      	; 0x2b68 <itoa+0x2c>
    2b66:	89 5d       	subi	r24, 0xD9	; 217
    2b68:	81 93       	st	Z+, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	a1 f7       	brne	.-24     	; 0x2b58 <itoa+0x1c>
    2b70:	16 f4       	brtc	.+4      	; 0x2b76 <itoa+0x3a>
    2b72:	5d e2       	ldi	r21, 0x2D	; 45
    2b74:	51 93       	st	Z+, r21
    2b76:	10 82       	st	Z, r1
    2b78:	c9 01       	movw	r24, r18
    2b7a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <strrev>

00002b7e <strrev>:
    2b7e:	dc 01       	movw	r26, r24
    2b80:	fc 01       	movw	r30, r24
    2b82:	67 2f       	mov	r22, r23
    2b84:	71 91       	ld	r23, Z+
    2b86:	77 23       	and	r23, r23
    2b88:	e1 f7       	brne	.-8      	; 0x2b82 <strrev+0x4>
    2b8a:	32 97       	sbiw	r30, 0x02	; 2
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <strrev+0x18>
    2b8e:	7c 91       	ld	r23, X
    2b90:	6d 93       	st	X+, r22
    2b92:	70 83       	st	Z, r23
    2b94:	62 91       	ld	r22, -Z
    2b96:	ae 17       	cp	r26, r30
    2b98:	bf 07       	cpc	r27, r31
    2b9a:	c8 f3       	brcs	.-14     	; 0x2b8e <strrev+0x10>
    2b9c:	08 95       	ret

00002b9e <__udivmodhi4>:
    2b9e:	aa 1b       	sub	r26, r26
    2ba0:	bb 1b       	sub	r27, r27
    2ba2:	51 e1       	ldi	r21, 0x11	; 17
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <__udivmodhi4_ep>

00002ba6 <__udivmodhi4_loop>:
    2ba6:	aa 1f       	adc	r26, r26
    2ba8:	bb 1f       	adc	r27, r27
    2baa:	a6 17       	cp	r26, r22
    2bac:	b7 07       	cpc	r27, r23
    2bae:	10 f0       	brcs	.+4      	; 0x2bb4 <__udivmodhi4_ep>
    2bb0:	a6 1b       	sub	r26, r22
    2bb2:	b7 0b       	sbc	r27, r23

00002bb4 <__udivmodhi4_ep>:
    2bb4:	88 1f       	adc	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	5a 95       	dec	r21
    2bba:	a9 f7       	brne	.-22     	; 0x2ba6 <__udivmodhi4_loop>
    2bbc:	80 95       	com	r24
    2bbe:	90 95       	com	r25
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	08 95       	ret

00002bc6 <_exit>:
    2bc6:	f8 94       	cli

00002bc8 <__stop_program>:
    2bc8:	ff cf       	rjmp	.-2      	; 0x2bc8 <__stop_program>
